from sqlalchemy import create_engine
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
from collections import Counter
import re

# 한글 폰트 설정
matplotlib.rc('font', family='Malgun Gothic')  # 윈도우
plt.rcParams['axes.unicode_minus'] = False  # 마이너스 기호 깨짐 방지

# DB 연결 정보 설정
engine = create_engine("mysql+pymysql:///engineers")

# 데이터 로딩
df = pd.read_sql("SELECT * FROM merged_jobs_preprocessing", con=engine)

# 기술 및 소프트 스킬 키워드 리스트
valid_keywords = [
    # 기술 키워드
    'python', 'java', 'sql', 'javascript', 'html', 'css', 'react', 'node', 'spring',
    'tensorflow', 'pytorch', 'scikit', 'numpy', 'pandas', 'aws', 'azure', 'gcp',
    'docker', 'kubernetes', 'hadoop', 'spark', 'flink', 'airflow', 'linux',
    'git', 'github', 'c', 'c++', 'c#', 'r', 'go', 'typescript', 'fastapi',
    'django', 'flask', 'oracle', 'mysql', 'postgresql', 'nosql', 'mongo', 'elasticsearch',
    '소통', '협업', '문제해결', '분석', '책임감', '기획', '발표', '논리적사고', '자기주도', '적극성',
    '성실', '데이터분석', '모델링', '리더십', '비즈니스이해', '통계', '프레젠테이션', '팀워크'
]

# 직무별 키워드 카운트
job_skill_counts = {}
split_pattern = r'[,\s;/]+'

for job in df['직무코드'].unique():
    skills = df[df['직무코드'] == job]['스킬'] \
        .str.lower().str.strip().str.cat(sep=' ')
    skill_list = [
        s for s in re.split(split_pattern, skills)
        if s in valid_keywords
    ]
    job_skill_counts[job] = Counter(skill_list)

# 전체 스킬 최대값 계산 (시각화 정렬용)
top_n = 10
global_max = max([
    count for counter in job_skill_counts.values()
    for _, count in counter.most_common(top_n)
], default=0)

# 시각화
cols = 3
rows = -(-len(job_skill_counts) // cols)
fig, axes = plt.subplots(rows, cols, figsize=(5 * cols, 5 * rows))
axes = axes.flatten()

for i, (job, counter) in enumerate(job_skill_counts.items()):
    top_skills = counter.most_common(top_n)
    if not top_skills:
        continue
    skills, counts = zip(*top_skills)
    bars = axes[i].barh(skills, counts, color='skyblue')
    axes[i].set_title(f'{job} 탑 {top_n} 스킬')
    axes[i].invert_yaxis()
    axes[i].set_xlim(0, global_max + 5)
    for bar in bars:
        width = bar.get_width()
        axes[i].text(width + 0.5, bar.get_y() + bar.get_height() / 2,
                     f'{int(width)}', va='center', fontsize=9)

# 남는 subplot 제거
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()
